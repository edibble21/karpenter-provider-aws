apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: nodepool-validation
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
    - apiGroups: ["karpenter.sh"]
      apiVersions: ["v1"]
      operations: ["CREATE", "UPDATE"]
      resources: ["nodepools"]
  validations:
  # From spec.disruption.budgets
    - expression: |
        !has(object.spec.disruption) || !has(object.spec.disruption.budgets) ||
        object.spec.disruption.budgets.all(x,
          has(x.schedule) == has(x.duration)
        )
      message: "'schedule' must be set with 'duration'"

    # From spec.template.metadata.labels
    - expression: |
        !has(object.spec.template.metadata) || !has(object.spec.template.metadata.labels) ||
        object.spec.template.metadata.labels.all(x,
          x in [
            "beta.kubernetes.io/instance-type",
            "failure-domain.beta.kubernetes.io/region",
            "beta.kubernetes.io/os",
            "beta.kubernetes.io/arch",
            "failure-domain.beta.kubernetes.io/zone",
            "topology.kubernetes.io/zone",
            "topology.kubernetes.io/region",
            "kubernetes.io/arch",
            "kubernetes.io/os",
            "node.kubernetes.io/windows-build"
          ] ||
          x.find("^([^/]+)").endsWith("node.kubernetes.io") ||
          x.find("^([^/]+)").endsWith("node-restriction.kubernetes.io") ||
          !x.find("^([^/]+)").endsWith("kubernetes.io")
        )
      message: "label domain kubernetes.io is restricted"

    - expression: |
        !has(object.spec.template.metadata) || !has(object.spec.template.metadata.labels) ||
        object.spec.template.metadata.labels.all(x,
          x.find("^([^/]+)").endsWith("kops.k8s.io") ||
          !x.find("^([^/]+)").endsWith("k8s.io")
        )
      message: "label domain k8s.io is restricted"

    - expression: |
        !has(object.spec.template.metadata) || !has(object.spec.template.metadata.labels) ||
        object.spec.template.metadata.labels.all(x,
          x in ["karpenter.sh/capacity-type", "karpenter.sh/nodepool"] ||
          !x.find("^([^/]+)").endsWith("karpenter.sh")
        )
      message: "label domain karpenter.sh is restricted"

    - expression: |
        !has(object.spec.template.metadata) || !has(object.spec.template.metadata.labels) ||
        object.spec.template.metadata.labels.all(x,
          x != "karpenter.sh/nodepool"
        )
      message: "label karpenter.sh/nodepool is restricted"

    - expression: |
        !has(object.spec.template.metadata) || !has(object.spec.template.metadata.labels) ||
        object.spec.template.metadata.labels.all(x,
          x != "kubernetes.io/hostname"
        )
      message: "label kubernetes.io/hostname is restricted"

    - expression: |
        !has(object.spec.template.metadata) || !has(object.spec.template.metadata.labels) ||
        object.spec.template.metadata.labels.all(x,
          x in [
            "karpenter.k8s.aws/capacity-reservation-id",
            "karpenter.k8s.aws/ec2nodeclass",
            "karpenter.k8s.aws/instance-encryption-in-transit-supported",
            "karpenter.k8s.aws/instance-category",
            "karpenter.k8s.aws/instance-hypervisor",
            "karpenter.k8s.aws/instance-family",
            "karpenter.k8s.aws/instance-generation",
            "karpenter.k8s.aws/instance-local-nvme",
            "karpenter.k8s.aws/instance-size",
            "karpenter.k8s.aws/instance-cpu",
            "karpenter.k8s.aws/instance-cpu-manufacturer",
            "karpenter.k8s.aws/instance-cpu-sustained-clock-speed-mhz",
            "karpenter.k8s.aws/instance-memory",
            "karpenter.k8s.aws/instance-ebs-bandwidth",
            "karpenter.k8s.aws/instance-network-bandwidth",
            "karpenter.k8s.aws/instance-gpu-name",
            "karpenter.k8s.aws/instance-gpu-manufacturer",
            "karpenter.k8s.aws/instance-gpu-count",
            "karpenter.k8s.aws/instance-gpu-memory",
            "karpenter.k8s.aws/instance-accelerator-name",
            "karpenter.k8s.aws/instance-accelerator-manufacturer",
            "karpenter.k8s.aws/instance-accelerator-count"
          ] ||
          !x.find("^([^/]+)").endsWith("karpenter.k8s.aws")
        )
      message: "label domain karpenter.k8s.aws is restricted"

    # From spec.template.spec.nodeClassRef
    - expression: "has(object.spec.template.spec.nodeClassRef.group) && object.spec.template.spec.nodeClassRef.group != ''"
      message: "group may not be empty"

    - expression: "has(object.spec.template.spec.nodeClassRef.kind) && object.spec.template.spec.nodeClassRef.kind != ''"
      message: "kind may not be empty"

    - expression: "has(object.spec.template.spec.nodeClassRef.name) && object.spec.template.spec.nodeClassRef.name != ''"
      message: "name may not be empty"

    # From spec.template.spec.requirements.items.properties.key
    - expression: |
        !has(object.spec.template.spec.requirements) ||
        object.spec.template.spec.requirements.all(r,
          r.key in [
            "beta.kubernetes.io/instance-type",
            "failure-domain.beta.kubernetes.io/region",
            "beta.kubernetes.io/os",
            "beta.kubernetes.io/arch",
            "failure-domain.beta.kubernetes.io/zone",
            "topology.kubernetes.io/zone",
            "topology.kubernetes.io/region",
            "node.kubernetes.io/instance-type",
            "kubernetes.io/arch",
            "kubernetes.io/os",
            "node.kubernetes.io/windows-build"
          ] ||
          r.key.find("^([^/]+)").endsWith("node.kubernetes.io") ||
          r.key.find("^([^/]+)").endsWith("node-restriction.kubernetes.io") ||
          !r.key.find("^([^/]+)").endsWith("kubernetes.io")
        )
      message: "label domain kubernetes.io is restricted"

    - expression: |
        !has(object.spec.template.spec.requirements) ||
        object.spec.template.spec.requirements.all(r,
          r.key.find("^([^/]+)").endsWith("kops.k8s.io") ||
          !r.key.find("^([^/]+)").endsWith("k8s.io")
        )
      message: "label domain k8s.io is restricted"

    - expression: |
        !has(object.spec.template.spec.requirements) ||
        object.spec.template.spec.requirements.all(r,
          r.key in ["karpenter.sh/capacity-type", "karpenter.sh/nodepool"] ||
          !r.key.find("^([^/]+)").endsWith("karpenter.sh")
        )
      message: "label domain karpenter.sh is restricted"

    - expression: |
        !has(object.spec.template.spec.requirements) ||
        object.spec.template.spec.requirements.all(r,
          r.key != "karpenter.sh/nodepool"
        )
      message: "label karpenter.sh/nodepool is restricted"

    - expression: |
        !has(object.spec.template.spec.requirements) ||
        object.spec.template.spec.requirements.all(r,
          r.key != "kubernetes.io/hostname"
        )
      message: "label kubernetes.io/hostname is restricted"

    # From spec.template.spec.requirements
    - expression: |
        !has(object.spec.template.spec.requirements) ||
        object.spec.template.spec.requirements.all(x,
          x.operator == 'In' ? x.values.size() != 0 : true
        )
      message: "requirements with operator 'In' must have a value defined"

    - expression: |
        !has(object.spec.template.spec.requirements) ||
        object.spec.template.spec.requirements.all(x,
          (x.operator == 'Gt' || x.operator == 'Lt') ?
          (x.values.size() == 1 && int(x.values[0]) >= 0) : true
        )
      message: "requirements operator 'Gt' or 'Lt' must have a single positive integer value"

    - expression: |
        !has(object.spec.template.spec.requirements) ||
        object.spec.template.spec.requirements.all(x,
          (x.operator == 'In' && has(x.minValues)) ?
          x.values.size() >= x.minValues : true
        )
      message: "requirements with 'minValues' must have at least that many values specified in the 'values' field"
---
# And create a separate policy for UPDATE operations:
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: nodepool-update-validation
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
    - apiGroups: ["karpenter.sh"]
      apiVersions: ["v1"]
      operations: ["UPDATE"]
      resources: ["nodepools"]
  validations:
    - expression: |
        object.spec.template.spec.nodeClassRef.group == oldObject.spec.template.spec.nodeClassRef.group
      message: "nodeClassRef.group is immutable"
    - expression: |
        object.spec.template.spec.nodeClassRef.kind == oldObject.spec.template.spec.nodeClassRef.kind
      message: "nodeClassRef.kind is immutable"